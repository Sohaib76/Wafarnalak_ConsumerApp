{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sx/Documents/React Native/Foren Tech/consumer_latest/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport * as Updates from \"expo-updates\";\nimport * as Notifications from \"expo-notifications\";\nimport React, { useState } from \"react\";\nimport * as Analytics from \"expo-firebase-analytics\";\nimport AppNavigator from \"./appNavigator\";\nimport { Asset } from \"expo-asset\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Root } from \"native-base\";\nimport * as firebase from \"firebase\";\nconsole.disableYellowBox = true;\nimport * as SplashScreen from \"expo-splash-screen\";\nimport * as Permissions from \"expo-permissions\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n\n    _this.checkLangugae = function _callee() {\n      var lan;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"lan\"));\n\n            case 2:\n              lan = _context.sent;\n              console.log(\"lan in check functionr \", lan);\n\n              _this.setState({\n                lan: lan !== null ? lan : \"en\"\n              });\n\n              if (lan) {\n                if (lan !== \"en\") {\n                  I18nManager.isRTL = true;\n                  I18nManager.forceRTL(true);\n                } else {\n                  I18nManager.isRTL = false;\n                  I18nManager.forceRTL(false);\n                }\n              }\n\n              _this.firebaseConfig();\n\n              if (!(lan !== null && lan !== \"\")) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt(\"return\", lan);\n\n            case 11:\n              return _context.abrupt(\"return\", \"en\");\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._cacheSplashResourcesAsync = function _callee2() {\n      var gif, gif2;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              gif = require(\"./assets/splash1.gif\");\n              gif2 = require(\"./assets/splash-ar1.gif\");\n              Asset.fromModule(gif2).downloadAsync();\n              return _context2.abrupt(\"return\", Asset.fromModule(gif).downloadAsync());\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._cacheResourcesAsync = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Asset.loadAsync([require(\"./assets/icon.png\"), require(\"./assets/Profile-Image.png\"), require(\"./assets/Help-min.png\"), require(\"./assets/Job-Icon-min.png\")]));\n\n            case 2:\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(Expo.Font.loadAsync({\n                Roboto: require(\"native-base/Fonts/Roboto.ttf\"),\n                Roboto_medium: require(\"native-base/Fonts/Roboto_medium.ttf\"),\n                montserrat_semi_blod: require(\"./assets/Fonts/English/Montserrat-SemiBold.otf\"),\n                montserrat_medium: require(\"./assets/Fonts/English/Montserrat-Medium.otf\"),\n                montserrat_arabic_regular: require(\"./assets/Fonts/Arabic/ArbFONTS-Montserrat-Arabic-Regular.ttf\")\n              }));\n\n            case 4:\n              loadApp = function loadApp() {\n                _this.setState({\n                  isAppReady: true\n                });\n              };\n\n              setTimeout(function () {\n                this.loadApp();\n              }, Platform.OS === \"android\" ? 1800 : 2500);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.componentDidMount = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              Updates.checkForUpdateAsync().then(function (update) {\n                if (update.isAvailable) {\n                  _this.setState({\n                    isUpdateAvailable: true\n                  });\n\n                  updateDownload = function updateDownload() {\n                    Updates.reload();\n                  };\n\n                  setTimeout(function () {\n                    this.updateDownload();\n                  }, 5000);\n                }\n              });\n              Analytics.setDebugModeEnabled(true);\n\n              if (!(Platform.OS === \"android\")) {\n                _context4.next = 5;\n                break;\n              }\n\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(Notifications.createChannelAndroidAsync(\"order-status\", {\n                name: \"order\",\n                sound: true\n              }));\n\n            case 5:\n              Notifications.setBadgeNumberAsync(0);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.registerForPushNotificationsAsync = function _callee5() {\n      var _await$Permissions$ge, status, finalStatus, token;\n\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n            case 2:\n              _await$Permissions$ge = _context5.sent;\n              status = _await$Permissions$ge.status;\n              finalStatus = status;\n\n              if (!(finalStatus !== \"granted\")) {\n                _context5.next = 9;\n                break;\n              }\n\n              console.log(\"permissions not granted \", finalStatus);\n              _context5.next = 13;\n              break;\n\n            case 9:\n              _context5.next = 11;\n              return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n            case 11:\n              token = _context5.sent;\n              console.log(\" push notifications token \", token);\n\n            case 13:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.askPermissions = function _callee6() {\n      var _await$Permissions$ge2, existingStatus, finalStatus, _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n            case 2:\n              _await$Permissions$ge2 = _context6.sent;\n              existingStatus = _await$Permissions$ge2.status;\n              finalStatus = existingStatus;\n\n              if (!(existingStatus !== \"granted\")) {\n                _context6.next = 11;\n                break;\n              }\n\n              _context6.next = 8;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n            case 8:\n              _await$Permissions$as = _context6.sent;\n              status = _await$Permissions$as.status;\n              finalStatus = status;\n\n            case 11:\n              if (!(finalStatus !== \"granted\")) {\n                _context6.next = 13;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", false);\n\n            case 13:\n              return _context6.abrupt(\"return\", true);\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.registerForPushNotifications = function _callee7() {\n      var enabled, token;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(_this.askPermissions());\n\n            case 2:\n              enabled = _context7.sent;\n\n              if (enabled) {\n                _context7.next = 5;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", Promise.resolve());\n\n            case 5:\n              _context7.next = 7;\n              return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n            case 7:\n              token = _context7.sent;\n              return _context7.abrupt(\"return\", token);\n\n            case 9:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.enablePushNotifications = function _callee8() {\n      var token;\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(_this.registerForPushNotifications());\n\n            case 2:\n              token = _context8.sent;\n\n              if (token) {\n                console.log(\"token \", token);\n              }\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      isSplashReady: false,\n      isAppReady: false,\n      lan: \"en\",\n      isUpdateAvailable: false\n    };\n\n    _this.checkLangugae();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"firebaseConfig\",\n    value: function firebaseConfig() {\n      var firebaseConfig = {\n        apiKey: \"AIzaSyA4be4vwXO-Zn5IYcxA-trViY3j6LtODjg\",\n        authDomain: \"foren-se-customers.firebaseapp.com\",\n        databaseURL: \"https://foren-se-customers.firebaseio.com\",\n        projectId: \"foren-se-customers\",\n        storageBucket: \"foren-se-customers.appspot.com\",\n        messagingSenderId: \"200064457252\",\n        appId: \"1:200064457252:web:7ec8aa4d569aac16b156b1\",\n        measurementId: \"G-VFK8LKML45\"\n      };\n      firebase.initializeApp(firebaseConfig);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.isUpdateAvailable === true) {\n        return React.createElement(Image, {\n          style: {\n            height: Dimensions.get(\"window\").height,\n            width: Dimensions.get(\"window\").width\n          },\n          source: require(\"./assets/updating.gif\"),\n          resizeMode: \"contain\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 9\n          }\n        });\n      }\n\n      if (!this.state.isAppReady && !this.state.isUpdateAvailable) {\n        this._cacheResourcesAsync();\n\n        if (this.state.lan === \"en\") {\n          return React.createElement(Image, {\n            style: {\n              height: Dimensions.get(\"window\").height,\n              width: Dimensions.get(\"window\").width\n            },\n            source: require(\"./assets/splash1.gif\"),\n            resizeMode: \"contain\",\n            onLoadStart: this._cacheResourcesAsync,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 11\n            }\n          });\n        } else {\n          return React.createElement(Image, {\n            style: {\n              height: Dimensions.get(\"window\").height,\n              width: Dimensions.get(\"window\").width\n            },\n            source: require(\"./assets/splash-ar1.gif\"),\n            resizeMode: \"contain\",\n            onLoadStart: this._cacheResourcesAsync,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 11\n            }\n          });\n        }\n      }\n\n      return React.createElement(SafeAreaView, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 7\n        }\n      }, React.createElement(Root, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }\n      }, React.createElement(AppNavigator, {\n        lan: this.state.lan,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/sx/Documents/React Native/Foren Tech/consumer_latest/App.js"],"names":["AsyncStorage","Updates","Notifications","React","useState","Analytics","AppNavigator","Asset","Ionicons","Root","firebase","console","disableYellowBox","SplashScreen","Permissions","App","checkLangugae","getItem","lan","log","setState","I18nManager","isRTL","forceRTL","firebaseConfig","_cacheSplashResourcesAsync","gif","require","gif2","fromModule","downloadAsync","_cacheResourcesAsync","loadAsync","Expo","Font","Roboto","Roboto_medium","montserrat_semi_blod","montserrat_medium","montserrat_arabic_regular","loadApp","isAppReady","setTimeout","Platform","OS","componentDidMount","checkForUpdateAsync","then","update","isAvailable","isUpdateAvailable","updateDownload","reload","setDebugModeEnabled","createChannelAndroidAsync","name","sound","setBadgeNumberAsync","registerForPushNotificationsAsync","getAsync","NOTIFICATIONS","status","finalStatus","getExpoPushTokenAsync","token","askPermissions","existingStatus","askAsync","registerForPushNotifications","enabled","Promise","resolve","enablePushNotifications","state","isSplashReady","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","height","Dimensions","get","width","flex","Component"],"mappings":"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","sourcesContent":["// import { AppLoading, SplashScreen } from \"expo\";\n// \"enabled\":false\n// https://fnd.io/#/pk/search?mediaType=all&term=Google\n// https://theappstore.org/\n\nimport {\n  AsyncStorage,\n  Dimensions,\n  I18nManager,\n  Image,\n  Platform,\n  StyleSheet,\n  View,\n  StatusBar,\n  SafeAreaView,\n} from \"react-native\";\nimport * as Updates from \"expo-updates\";\nimport * as Notifications from \"expo-notifications\";\nimport React, { useState } from \"react\";\nimport * as Analytics from \"expo-firebase-analytics\";\nimport AppNavigator from \"./appNavigator\";\nimport { Asset } from \"expo-asset\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Root } from \"native-base\";\nimport * as firebase from \"firebase\";\nconsole.disableYellowBox = true;\nimport * as SplashScreen from \"expo-splash-screen\";\nimport * as Permissions from \"expo-permissions\";\n//import messaging from \"@react-native-firebase/messaging\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isSplashReady: false,\n      isAppReady: false,\n      lan: \"en\",\n      isUpdateAvailable: false,\n    };\n    this.checkLangugae();\n  }\n  checkLangugae = async () => {\n    let lan = await AsyncStorage.getItem(\"lan\");\n    console.log(\"lan in check functionr \", lan);\n    this.setState({ lan: lan !== null ? lan : \"en\" });\n    if (lan) {\n      if (lan !== \"en\") {\n        I18nManager.isRTL = true;\n        I18nManager.forceRTL(true);\n      } else {\n        I18nManager.isRTL = false;\n        I18nManager.forceRTL(false);\n      }\n    }\n    this.firebaseConfig();\n    if (lan !== null && lan !== \"\") {\n      return lan;\n    } else {\n      return \"en\";\n    }\n  };\n\n  _cacheSplashResourcesAsync = async () => {\n    const gif = require(\"./assets/splash1.gif\");\n    const gif2 = require(\"./assets/splash-ar1.gif\");\n    Asset.fromModule(gif2).downloadAsync();\n    return Asset.fromModule(gif).downloadAsync();\n  };\n  firebaseConfig() {\n    let firebaseConfig = {\n      apiKey: \"AIzaSyA4be4vwXO-Zn5IYcxA-trViY3j6LtODjg\",\n      authDomain: \"foren-se-customers.firebaseapp.com\",\n      databaseURL: \"https://foren-se-customers.firebaseio.com\",\n      projectId: \"foren-se-customers\",\n      storageBucket: \"foren-se-customers.appspot.com\",\n      messagingSenderId: \"200064457252\",\n      appId: \"1:200064457252:web:7ec8aa4d569aac16b156b1\",\n      measurementId: \"G-VFK8LKML45\",\n    };\n    // Initialize Firebase\n    firebase.initializeApp(firebaseConfig);\n    // firebase.Analytics();\n  }\n\n  _cacheResourcesAsync = async () => {\n    await Asset.loadAsync([\n      require(\"./assets/icon.png\"),\n      require(\"./assets/Profile-Image.png\"),\n      require(\"./assets/Help-min.png\"),\n      require(\"./assets/Job-Icon-min.png\"),\n    ]),\n      await Expo.Font.loadAsync({\n        Roboto: require(\"native-base/Fonts/Roboto.ttf\"),\n        Roboto_medium: require(\"native-base/Fonts/Roboto_medium.ttf\"),\n        montserrat_semi_blod: require(\"./assets/Fonts/English/Montserrat-SemiBold.otf\"),\n        montserrat_medium: require(\"./assets/Fonts/English/Montserrat-Medium.otf\"),\n        montserrat_arabic_regular: require(\"./assets/Fonts/Arabic/ArbFONTS-Montserrat-Arabic-Regular.ttf\"),\n      });\n\n    loadApp = () => {\n      this.setState({ isAppReady: true });\n    };\n    setTimeout(\n      function () {\n        this.loadApp();\n      },\n      Platform.OS === \"android\" ? 1800 : 2500\n    );\n  };\n\n  componentDidMount = async () => {\n    //Prevent native splash screen from autohiding\n    // this.requestPermission();\n    Updates.checkForUpdateAsync().then((update) => {\n      if (update.isAvailable) {\n        this.setState({ isUpdateAvailable: true });\n        updateDownload = () => {\n          Updates.reload();\n        };\n        setTimeout(function () {\n          this.updateDownload();\n        }, 5000);\n      }\n    });\n    // const token = (await Notifications.getDevicePushTokenAsync()).data;\n    // console.log(\"token in did mount \", token);\n    // this.enablePushNotifications();\n    // try {\n    //   await SplashScreen.preventAutoHideAsync();\n    // } catch (e) {\n    //   console.log(\"error splash auto hiding \", e);\n    // }\n    Analytics.setDebugModeEnabled(true);\n    if (Platform.OS === \"android\") {\n      await Notifications.createChannelAndroidAsync(\"order-status\", {\n        name: \"order\",\n        sound: true,\n      });\n    }\n\n    Notifications.setBadgeNumberAsync(0);\n  };\n\n  render() {\n    // if (!this.state.isSplashReady) {\n    //   return (\n    //     <AppLoading\n    //       startAsync={this._cacheSplashResourcesAsync}\n    //       onFinish={() => this.setState({ isSplashReady: true })}\n\n    //     />\n    //   );\n    // }\n    if (this.state.isUpdateAvailable === true) {\n      return (\n        <Image\n          style={{\n            height: Dimensions.get(\"window\").height,\n            width: Dimensions.get(\"window\").width,\n          }}\n          source={require(\"./assets/updating.gif\")}\n          resizeMode=\"contain\"\n        />\n      );\n    }\n    if (!this.state.isAppReady && !this.state.isUpdateAvailable) {\n      this._cacheResourcesAsync();\n      // return null;\n      if (this.state.lan === \"en\") {\n        return (\n          <Image\n            style={{\n              height: Dimensions.get(\"window\").height,\n              width: Dimensions.get(\"window\").width,\n            }}\n            source={require(\"./assets/splash1.gif\")}\n            resizeMode=\"contain\"\n            onLoadStart={this._cacheResourcesAsync}\n          />\n        );\n      } else {\n        return (\n          <Image\n            style={{\n              height: Dimensions.get(\"window\").height,\n              width: Dimensions.get(\"window\").width,\n            }}\n            source={require(\"./assets/splash-ar1.gif\")}\n            resizeMode=\"contain\"\n            onLoadStart={this._cacheResourcesAsync}\n          />\n        );\n      }\n    }\n    return (\n      <SafeAreaView style={{ flex: 1 }}>\n        <Root>\n          <AppNavigator lan={this.state.lan} />\n        </Root>\n      </SafeAreaView>\n    );\n  }\n  registerForPushNotificationsAsync = async () => {\n    const { status } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n    let finalStatus = status;\n    if (finalStatus !== \"granted\") {\n      console.log(\"permissions not granted \", finalStatus);\n    } else {\n      let token = await Notifications.getExpoPushTokenAsync();\n      console.log(\" push notifications token \", token);\n    }\n  };\n  askPermissions = async () => {\n    const { status: existingStatus } = await Permissions.getAsync(\n      Permissions.NOTIFICATIONS\n    );\n    let finalStatus = existingStatus;\n    if (existingStatus !== \"granted\") {\n      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n      finalStatus = status;\n    }\n    if (finalStatus !== \"granted\") {\n      return false;\n    }\n    return true;\n  };\n\n  registerForPushNotifications = async () => {\n    const enabled = await this.askPermissions();\n    if (!enabled) {\n      return Promise.resolve();\n    }\n    // Get the token that uniquely identifies this device\n    let token = await Notifications.getExpoPushTokenAsync();\n    return token;\n  };\n  enablePushNotifications = async () => {\n    let token = await this.registerForPushNotifications();\n    if (token) {\n      console.log(\"token \", token);\n\n      // this.setState({ token });\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}