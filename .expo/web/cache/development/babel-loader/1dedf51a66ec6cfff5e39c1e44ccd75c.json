{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sx/Documents/React Native/Foren Tech/consumer_latest/screens/address/mapScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as Location from \"expo-location\";\nimport * as Permissions from \"expo-permissions\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Container, Content, Footer, Header, Input, Left, Right, Spinner, Text, Thumbnail, Title, Toast } from \"native-base\";\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport MapView from \"react-native-maps\";\nimport React from \"react\";\n\nvar GoogleMapScreen = function (_React$Component) {\n  _inherits(GoogleMapScreen, _React$Component);\n\n  var _super = _createSuper(GoogleMapScreen);\n\n  function GoogleMapScreen(props) {\n    var _this;\n\n    _classCallCheck(this, GoogleMapScreen);\n\n    _this = _super.call(this, props);\n\n    _this.hideModal = function () {\n      _this.setState({\n        modalVisible: false\n      });\n    };\n\n    _this.showModal = function () {\n      _this.setState({\n        modalVisible: true\n      });\n    };\n\n    _this._getLocationAsync = function _callee() {\n      var _await$Permissions$as, status, location, obj, obj2;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              if (!(status !== \"granted\")) {\n                _context.next = 9;\n                break;\n              }\n\n              Toast.show({\n                text: _this.state.lan == \"en\" ? \"Please allow location permission\" : \"يرجى السماح لتحديد الموقع\",\n                position: \"bottom\"\n              });\n\n              _this.setState({\n                isMapLoaded: true\n              });\n\n              _context.next = 21;\n              break;\n\n            case 9:\n              console.log(\"status\", status);\n\n              if (!Location.hasServicesEnabledAsync()) {\n                _context.next = 20;\n                break;\n              }\n\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({\n                accuracy: Location.Accuracy.High\n              }));\n\n            case 13:\n              location = _context.sent;\n              obj = {\n                longitude: location.coords.longitude,\n                latitude: location.coords.latitude,\n                latitudeDelta: 0.005,\n                longitudeDelta: 0.005\n              };\n              obj2 = {\n                longitude: location.coords.longitude,\n                latitude: location.coords.latitude\n              };\n\n              _this.fetchAddress(obj);\n\n              _this.setState({\n                region: obj,\n                currentUserLocation: obj,\n                x: obj2,\n                isMapLoaded: true\n              });\n\n              _context.next = 21;\n              break;\n\n            case 20:\n              Toast.show({\n                text: _this.state.lan == \"en\" ? \"Please enable Location service of your mobile setting\" : \"يرجى تمكين خدمة الموقع في إعدادات هاتفك\",\n                position: \"bottom\"\n              });\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.onRegionChange = function (region) {\n      _this.setState({\n        region: region\n      });\n    };\n\n    _this.fetchAddress = function (lotlng) {\n      fetch(\"https://maps.googleapis.com/maps/api/geocode/json?address=\" + lotlng.latitude + \",\" + lotlng.longitude + \"&key=\" + \"AIzaSyA4be4vwXO-Zn5IYcxA-trViY3j6LtODjg\").then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        _this.setState({\n          address: responseJson.results[0].formatted_address\n        });\n      });\n    };\n\n    _this.saveLocation = function (e) {\n      _this.fetchAddress(e.nativeEvent.coordinate);\n\n      _this.setState({\n        x: e.nativeEvent.coordinate\n      });\n    };\n\n    _this.navigateToCurrentLocation = function () {};\n\n    _this.printer = function () {\n      console.log(\"I Prints\");\n    };\n\n    _this.saveAddress = function _callee2() {\n      var obj;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(_this.state.address !== \"\")) {\n                _context2.next = 12;\n                break;\n              }\n\n              obj = {\n                latitude: _this.state.x.latitude,\n                longitude: _this.state.x.longitude,\n                addressheader: _this.state.title,\n                addressdetail: _this.state.address\n              };\n              console.log(\"Coordincates ..\", obj);\n              console.log(\"Deal\", _this.props.navigation.state.params);\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"address\", JSON.stringify(obj)));\n\n            case 6:\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"tempAddress\", JSON.stringify(obj)));\n\n            case 8:\n              if (_this.props.navigation.state.params.chat) {\n                _this.props.navigation.navigate(\"Chat\", {\n                  obj: obj\n                });\n              }\n\n              _this.props.navigation.goBack();\n\n              _context2.next = 13;\n              break;\n\n            case 12:\n              Toast.show({\n                text: \"Google Location is not correctely indentified please try again!\",\n                position: \"bottom\"\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.notifyChange = function (loc) {\n      _this.getCordsForName(loc);\n    };\n\n    _this.getAddress = function (region) {\n      var obj = {\n        latitude: region.latitude,\n        longitude: region.longitude\n      };\n\n      _this.fetchAddress(obj);\n    };\n\n    _this.getCordsForName = function (loc) {\n      var obj = {\n        latitude: loc.geometry.location.lat,\n        longitude: loc.geometry.location.lng,\n        latitudeDelta: 0.005,\n        longitudeDelta: 0.005\n      };\n\n      _this.mapView.animateToRegion(obj, 2000);\n\n      _this.setState({\n        x: obj,\n        address: loc.formatted_address\n      });\n\n      _this.updateState(obj);\n    };\n\n    _this.updateState = function (location) {\n      _this.GooglePlacesRef.setAddressText(\"\");\n\n      _this.setState({\n        region: {\n          latitude: location.latitude,\n          longitude: location.longitude,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421\n        }\n      });\n    };\n\n    _this.backScreenSetup = function () {\n      if (_this.state.route == \"AddAddressScreen\") {\n        _this.props.navigation.navigate(_this.state.route, {\n          order: _this.state.order,\n          lan: _this.state.lan,\n          categories: _this.state.categories,\n          categorySelected: _this.state.categorySelected\n        });\n      } else {\n        _this.props.navigation.navigate(\"AddressesScreen\");\n      }\n    };\n\n    _this.state = {\n      x: {\n        latitude: 23.8859,\n        longitude: 45.0792\n      },\n      region: {\n        latitude: 23.8859,\n        longitude: 45.0792,\n        latitudeDelta: 0.005,\n        longitudeDelta: 0.005\n      },\n      modalVisible: false,\n      isMapLoaded: false,\n      address: \"\",\n      title: \"\",\n      customerid: \"\",\n      lan: \"en\",\n      route: \"AddressesScreen\",\n      order: {},\n      categorySelected: \"\",\n      categories: [],\n      currentUserLocation: {}\n    };\n    return _this;\n  }\n\n  _createClass(GoogleMapScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var navigation = this.props.navigation;\n      this.setState({\n        lan: navigation.getParam(\"lan\")\n      });\n\n      this._getLocationAsync();\n\n      console.log(\"Location\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var navigation = this.props.navigation;\n      var lanConfirm = navigation.getParam(\"lan\");\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 7\n        }\n      }, React.createElement(Header, {\n        style: {\n          marginTop: 0,\n          borderBottomWidth: 1,\n          borderBottomColor: \"#0866b0\",\n          backgroundColor: \"#ffffff\",\n          height: 65,\n          justifyContent: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 9\n        }\n      }, React.createElement(Left, {\n        style: {\n          marginLeft: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }\n      }, React.createElement(Ionicons, {\n        onPress: function onPress() {\n          return _this2.props.navigation.goBack();\n        },\n        name: lanConfirm == \"en\" ? \"chevron-back-outline\" : \"chevron-forward-outline\",\n        size: 34,\n        color: \"#0866b0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }\n      })), React.createElement(View, {\n        style: {\n          flex: 2,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          position: Platform.OS === \"android\" ? \"absolute\" : \"relative\",\n          alignSelf: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }\n      }, React.createElement(Title, {\n        style: {\n          fontFamily: \"montserrat_semi_blod\",\n          color: \"#0866b0\",\n          fontSize: 18\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }\n      }, lanConfirm == \"en\" ? \"Select Location\" : \"حدد العنوان\")), React.createElement(Right, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }\n      })), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 9\n        }\n      }, this.state.isMapLoaded === true ? React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }\n      }, React.createElement(MapView, {\n        showsUserLocation: true,\n        zoomEnabled: true,\n        ref: function ref(_ref) {\n          return _this2.mapView = _ref;\n        },\n        initialRegion: this.state.region,\n        onRegionChangeComplete: function onRegionChangeComplete(r) {\n          _this2.getAddress(r);\n        },\n        style: {\n          height: Dimensions.get(\"window\").height - 100,\n          width: Dimensions.get(\"window\").width\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 15\n        }\n      }, Platform.OS === \"ios\" ? React.createElement(Image, {\n        style: {\n          width: 40,\n          height: 40,\n          alignSelf: \"center\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flex: 1\n        },\n        source: require(\"../../assets/drop-pin.png\"),\n        resizeMode: \"contain\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 19\n        }\n      }) : React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 19\n        }\n      })), Platform.OS === \"android\" ? React.createElement(View, {\n        style: {\n          alignSelf: \"center\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 17\n        }\n      }, React.createElement(Image, {\n        style: {\n          width: 40,\n          height: 40\n        },\n        source: require(\"../../assets/drop-pin.png\"),\n        resizeMode: \"contain\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 19\n        }\n      })) : React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: {\n          alignSelf: \"center\",\n          fontSize: 10,\n          backgroundColor: \"white\",\n          width: 290,\n          position: \"absolute\",\n          top: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 15\n        }\n      }, React.createElement(GooglePlacesAutocomplete, {\n        placeholder: this.state.address,\n        minLength: 3,\n        styles: {\n          textInputContainer: {\n            backgroundColor: \"rgba(0,0,0,0)\",\n            borderTopWidth: 0,\n            borderBottomWidth: 0,\n            borderRadius: 12\n          },\n          textInput: {\n            marginLeft: 0,\n            marginRight: 0,\n            height: 50,\n            color: \"#5d5d5d\",\n            fontSize: 16,\n            borderWidth: 1.4,\n            marginTop: 0,\n            borderColor: \"lightgray\"\n          }\n        },\n        autoFocus: false,\n        returnKeyType: \"search\",\n        listViewDisplayed: false,\n        currentLocation: false,\n        fetchDetails: true,\n        onPress: function onPress(data) {\n          var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n          _this2.notifyChange(details);\n        },\n        query: {\n          key: \"AIzaSyA4be4vwXO-Zn5IYcxA-trViY3j6LtODjg\",\n          Language: \"en\"\n        },\n        nearbyPlacesAPI: \"GooglePlacesSearch\",\n        debounce: 200,\n        GooglePlacesAutocomplete: true,\n        ref: function ref(instance) {\n          _this2.GooglePlacesRef = instance;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 17\n        }\n      }))) : React.createElement(View, {\n        style: {\n          height: Dimensions.get(\"window\").height - 100,\n          width: Dimensions.get(\"window\").width\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }\n      }, React.createElement(Spinner, {\n        size: \"large\",\n        color: \"blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 15\n        }\n      }))), React.createElement(View, {\n        style: {\n          height: 90,\n          backgroundColor: \"transparent\",\n          position: \"absolute\",\n          bottom: 10,\n          width: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: this.saveAddress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: {\n          backgroundColor: \"#0764af\",\n          borderRadius: 10,\n          width: Dimensions.get(\"screen\").width - 160,\n          alignSelf: \"center\",\n          justifyContent: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }\n      }, React.createElement(LinearGradient, {\n        colors: [\"#0764af\", \"#6ea8cd\"],\n        start: [0.9, 0.2],\n        end: [0.1, 0.1],\n        style: {\n          borderRadius: 12\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: \"white\",\n          margin: 12,\n          alignSelf: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 17\n        }\n      }, lanConfirm == \"en\" ? \"Select Location\" : \"حدد العنوان\")))), React.createElement(View, {\n        style: {\n          position: \"absolute\",\n          right: 10,\n          bottom: 15\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _this2.mapView.animateToRegion(_this2.state.currentUserLocation);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../assets/navigation-button.png\"),\n        style: {\n          width: 60,\n          height: 60\n        },\n        resizeMode: \"contain\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }]);\n\n  return GoogleMapScreen;\n}(React.Component);\n\nexport { GoogleMapScreen as default };","map":{"version":3,"sources":["/Users/sx/Documents/React Native/Foren Tech/consumer_latest/screens/address/mapScreen.js"],"names":["Location","Permissions","AsyncStorage","Button","Container","Content","Footer","Header","Input","Left","Right","Spinner","Text","Thumbnail","Title","Toast","GooglePlacesAutocomplete","Ionicons","LinearGradient","MapView","React","GoogleMapScreen","props","hideModal","setState","modalVisible","showModal","_getLocationAsync","askAsync","LOCATION","status","show","text","state","lan","position","isMapLoaded","console","log","hasServicesEnabledAsync","getCurrentPositionAsync","accuracy","Accuracy","High","location","obj","longitude","coords","latitude","latitudeDelta","longitudeDelta","obj2","fetchAddress","region","currentUserLocation","x","onRegionChange","lotlng","fetch","then","response","json","responseJson","address","results","formatted_address","saveLocation","e","nativeEvent","coordinate","navigateToCurrentLocation","printer","saveAddress","addressheader","title","addressdetail","navigation","params","setItem","JSON","stringify","chat","navigate","goBack","notifyChange","loc","getCordsForName","getAddress","geometry","lat","lng","mapView","animateToRegion","updateState","GooglePlacesRef","setAddressText","backScreenSetup","route","order","categories","categorySelected","customerid","getParam","lanConfirm","marginTop","borderBottomWidth","borderBottomColor","backgroundColor","height","justifyContent","marginLeft","flex","alignItems","Platform","OS","alignSelf","fontFamily","color","fontSize","ref","r","Dimensions","get","width","require","left","right","top","bottom","textInputContainer","borderTopWidth","borderRadius","textInput","marginRight","borderWidth","borderColor","data","details","key","Language","instance","margin","Component"],"mappings":"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","sourcesContent":["import * as Location from \"expo-location\";\nimport * as Permissions from \"expo-permissions\";\n\nimport {\n  AsyncStorage,\n  Dimensions,\n  Image,\n  Platform,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport {\n  Button,\n  Container,\n  Content,\n  Footer,\n  Header,\n  Input,\n  Left,\n  Right,\n  Spinner,\n  Text,\n  Thumbnail,\n  Title,\n  Toast,\n} from \"native-base\";\n\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport MapView from \"react-native-maps\";\nimport React from \"react\";\n\nexport default class GoogleMapScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: {\n        latitude: 23.8859,\n        longitude: 45.0792,\n      },\n      region: {\n        latitude: 23.8859,\n        longitude: 45.0792,\n        latitudeDelta: 0.005,\n        longitudeDelta: 0.005,\n      },\n      modalVisible: false,\n      isMapLoaded: false,\n      address: \"\",\n      title: \"\",\n      customerid: \"\",\n      lan: \"en\",\n      route: \"AddressesScreen\",\n      order: {},\n      categorySelected: \"\",\n      categories: [],\n      currentUserLocation: {},\n    };\n  }\n  componentDidMount() {\n    const { navigation } = this.props;\n    this.setState({\n      lan: navigation.getParam(\"lan\"),\n    });\n    this._getLocationAsync();\n    console.log(\"Location\");\n  }\n  hideModal = () => {\n    this.setState({ modalVisible: false });\n  };\n  showModal = () => {\n    this.setState({ modalVisible: true });\n  };\n  _getLocationAsync = async () => {\n    let { status } = await Permissions.askAsync(Permissions.LOCATION);\n    if (status !== \"granted\") {\n      Toast.show({\n        text:\n          this.state.lan == \"en\"\n            ? \"Please allow location permission\"\n            : \"يرجى السماح لتحديد الموقع\",\n        position: \"bottom\",\n      });\n      this.setState({ isMapLoaded: true });\n      // console.log(\"status\", status);\n    } else {\n      console.log(\"status\", status);\n      // console.log(\"location l\", Location);\n      // let location = await Location.getForegroundPermissionsAsync();\n      // console.log(\"location out\", location);\n      if (Location.hasServicesEnabledAsync()) {\n        let location = await Location.getCurrentPositionAsync({\n          accuracy: Location.Accuracy.High,\n        });\n        // console.log(\"location if\", location);\n        let obj = {\n          longitude: location.coords.longitude,\n          latitude: location.coords.latitude,\n          latitudeDelta: 0.005,\n          longitudeDelta: 0.005,\n        };\n        let obj2 = {\n          longitude: location.coords.longitude,\n          latitude: location.coords.latitude,\n        };\n        // this.fetchAddress(obj2);\n        this.fetchAddress(obj);\n        this.setState({\n          region: obj,\n          currentUserLocation: obj,\n          x: obj2,\n          isMapLoaded: true,\n        });\n      } else {\n        Toast.show({\n          text:\n            this.state.lan == \"en\"\n              ? \"Please enable Location service of your mobile setting\"\n              : \"يرجى تمكين خدمة الموقع في إعدادات هاتفك\",\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n  onRegionChange = (region) => {\n    this.setState({ region: region });\n  };\n  fetchAddress = (lotlng) => {\n    fetch(\n      \"https://maps.googleapis.com/maps/api/geocode/json?address=\" +\n        lotlng.latitude +\n        \",\" +\n        lotlng.longitude +\n        \"&key=\" +\n        \"AIzaSyA4be4vwXO-Zn5IYcxA-trViY3j6LtODjg\"\n    )\n      .then((response) => response.json())\n      .then((responseJson) => {\n        this.setState({ address: responseJson.results[0].formatted_address });\n      });\n  };\n  saveLocation = (e) => {\n    this.fetchAddress(e.nativeEvent.coordinate);\n    this.setState({ x: e.nativeEvent.coordinate });\n  };\n  navigateToCurrentLocation = () => {};\n  printer = () => {\n    console.log(\"I Prints\");\n  };\n  saveAddress = async () => {\n    if (this.state.address !== \"\") {\n      let obj = {\n        latitude: this.state.x.latitude,\n        longitude: this.state.x.longitude,\n        addressheader: this.state.title,\n        addressdetail: this.state.address,\n      };\n\n      console.log(\"Coordincates ..\", obj);\n      console.log(\"Deal\", this.props.navigation.state.params);\n\n      await AsyncStorage.setItem(\"address\", JSON.stringify(obj));\n      await AsyncStorage.setItem(\"tempAddress\", JSON.stringify(obj));\n\n      if (this.props.navigation.state.params.chat) {\n        // alert(\"chat\");\n        this.props.navigation.navigate(\"Chat\", { obj });\n      }\n      this.props.navigation.goBack();\n    } else {\n      Toast.show({\n        text: \"Google Location is not correctely indentified please try again!\",\n        position: \"bottom\",\n      });\n    }\n  };\n  notifyChange = (loc) => {\n    this.getCordsForName(loc);\n  };\n  getAddress = (region) => {\n    let obj = {\n      latitude: region.latitude,\n      longitude: region.longitude,\n    };\n    this.fetchAddress(obj);\n  };\n  getCordsForName = (loc) => {\n    let obj = {\n      latitude: loc.geometry.location.lat,\n      longitude: loc.geometry.location.lng,\n      latitudeDelta: 0.005,\n      longitudeDelta: 0.005,\n    };\n    this.mapView.animateToRegion(obj, 2000);\n    this.setState({ x: obj, address: loc.formatted_address });\n    this.updateState(obj);\n  };\n  updateState = (location) => {\n    this.GooglePlacesRef.setAddressText(\"\");\n    this.setState({\n      region: {\n        latitude: location.latitude,\n        longitude: location.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421,\n      },\n    });\n  };\n  backScreenSetup = () => {\n    if (this.state.route == \"AddAddressScreen\") {\n      this.props.navigation.navigate(this.state.route, {\n        order: this.state.order,\n        lan: this.state.lan,\n        categories: this.state.categories,\n        categorySelected: this.state.categorySelected,\n      });\n    } else {\n      this.props.navigation.navigate(\"AddressesScreen\");\n    }\n  };\n  render() {\n    const { navigation } = this.props;\n    let lanConfirm = navigation.getParam(\"lan\");\n    return (\n      <View>\n        <Header\n          style={{\n            marginTop: 0,\n            borderBottomWidth: 1,\n            borderBottomColor: \"#0866b0\",\n            backgroundColor: \"#ffffff\",\n            height: 65,\n            justifyContent: \"center\",\n          }}\n        >\n          <Left style={{ marginLeft: 10 }}>\n            <Ionicons\n              onPress={() => this.props.navigation.goBack()}\n              name={\n                lanConfirm == \"en\"\n                  ? \"chevron-back-outline\"\n                  : \"chevron-forward-outline\"\n              }\n              size={34}\n              color={\"#0866b0\"}\n            />\n          </Left>\n          <View\n            style={{\n              flex: 2,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: Platform.OS === \"android\" ? \"absolute\" : \"relative\",\n              alignSelf: \"center\",\n            }}\n          >\n            <Title\n              style={{\n                fontFamily: \"montserrat_semi_blod\",\n                color: \"#0866b0\",\n                fontSize: 18,\n              }}\n            >\n              {lanConfirm == \"en\" ? \"Select Location\" : \"حدد العنوان\"}\n            </Title>\n          </View>\n          <Right />\n        </Header>\n        <View>\n          {this.state.isMapLoaded === true ? (\n            <View>\n              <MapView\n                showsUserLocation={true}\n                zoomEnabled={true}\n                ref={(ref) => (this.mapView = ref)}\n                initialRegion={this.state.region}\n                onRegionChangeComplete={(r) => {\n                  this.getAddress(r);\n                }}\n                style={{\n                  height: Dimensions.get(\"window\").height - 100,\n                  width: Dimensions.get(\"window\").width,\n                }}\n              >\n                {Platform.OS === \"ios\" ? (\n                  <Image\n                    style={{\n                      width: 40,\n                      height: 40,\n                      alignSelf: \"center\",\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                      flex: 1,\n                    }}\n                    source={require(\"../../assets/drop-pin.png\")}\n                    resizeMode=\"contain\"\n                  />\n                ) : (\n                  <View></View>\n                )}\n              </MapView>\n              {Platform.OS === \"android\" ? (\n                <View\n                  style={{\n                    alignSelf: \"center\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    position: \"absolute\",\n                    left: 0,\n                    right: 0,\n                    top: 0,\n                    bottom: 0,\n                  }}\n                >\n                  <Image\n                    style={{ width: 40, height: 40 }}\n                    source={require(\"../../assets/drop-pin.png\")}\n                    resizeMode=\"contain\"\n                  />\n                </View>\n              ) : (\n                <View></View>\n              )}\n\n              <View\n                style={{\n                  alignSelf: \"center\",\n                  fontSize: 10,\n                  backgroundColor: \"white\",\n                  width: 290,\n                  position: \"absolute\",\n                  top: 20,\n                }}\n              >\n                <GooglePlacesAutocomplete\n                  placeholder={this.state.address}\n                  minLength={3}\n                  styles={{\n                    textInputContainer: {\n                      backgroundColor: \"rgba(0,0,0,0)\",\n                      borderTopWidth: 0,\n                      borderBottomWidth: 0,\n                      borderRadius: 12,\n                    },\n                    textInput: {\n                      marginLeft: 0,\n                      marginRight: 0,\n                      height: 50,\n                      color: \"#5d5d5d\",\n                      fontSize: 16,\n                      borderWidth: 1.4,\n                      marginTop: 0,\n                      borderColor: \"lightgray\",\n                    },\n                  }}\n                  autoFocus={false}\n                  returnKeyType={\"search\"}\n                  listViewDisplayed={false}\n                  currentLocation={false}\n                  fetchDetails={true}\n                  onPress={(data, details = null) => {\n                    this.notifyChange(details);\n                  }}\n                  query={{\n                    key: \"AIzaSyA4be4vwXO-Zn5IYcxA-trViY3j6LtODjg\",\n                    Language: \"en\",\n                  }}\n                  nearbyPlacesAPI=\"GooglePlacesSearch\"\n                  debounce={200}\n                  GooglePlacesAutocomplete\n                  ref={(instance) => {\n                    this.GooglePlacesRef = instance;\n                  }}\n                />\n              </View>\n            </View>\n          ) : (\n            <View\n              style={{\n                height: Dimensions.get(\"window\").height - 100,\n                width: Dimensions.get(\"window\").width,\n              }}\n            >\n              <Spinner size=\"large\" color=\"blue\" />\n            </View>\n          )}\n        </View>\n        <View\n          style={{\n            height: 90,\n            backgroundColor: \"transparent\",\n            position: \"absolute\",\n            bottom: 10,\n            width: \"100%\",\n          }}\n        >\n          <TouchableOpacity onPress={this.saveAddress}>\n            <View\n              style={{\n                backgroundColor: \"#0764af\",\n                borderRadius: 10,\n                width: Dimensions.get(\"screen\").width - 160,\n                alignSelf: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <LinearGradient\n                colors={[\"#0764af\", \"#6ea8cd\"]}\n                start={[0.9, 0.2]}\n                end={[0.1, 0.1]}\n                style={{ borderRadius: 12 }}\n              >\n                <Text\n                  style={{ color: \"white\", margin: 12, alignSelf: \"center\" }}\n                >\n                  {lanConfirm == \"en\" ? \"Select Location\" : \"حدد العنوان\"}\n                </Text>\n              </LinearGradient>\n            </View>\n          </TouchableOpacity>\n          <View style={{ position: \"absolute\", right: 10, bottom: 15 }}>\n            <TouchableOpacity\n              onPress={() => {\n                this.mapView.animateToRegion(this.state.currentUserLocation);\n              }}\n            >\n              <Image\n                source={require(\"../../assets/navigation-button.png\")}\n                style={{ width: 60, height: 60 }}\n                resizeMode=\"contain\"\n              />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}