{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoFirebaseAnalytics from \"./ExpoFirebaseAnalytics\";\nexport { default as FirebaseAnalyticsJS } from \"./FirebaseAnalyticsJS\";\n\nif (!ExpoFirebaseAnalytics) {\n  console.warn(\"No native ExpoFirebaseAnalytics module found, are you sure the expo-firebase-analytics's module is linked properly?\");\n}\n\nexport function logEvent(name, properties) {\n  return _regeneratorRuntime.async(function logEvent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.logEvent) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'logEvent');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.logEvent(name, properties));\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setAnalyticsCollectionEnabled(isEnabled) {\n  return _regeneratorRuntime.async(function setAnalyticsCollectionEnabled$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setAnalyticsCollectionEnabled) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setAnalyticsCollectionEnabled');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setAnalyticsCollectionEnabled(isEnabled));\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setCurrentScreen(screenName, screenClassOverride) {\n  return _regeneratorRuntime.async(function setCurrentScreen$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setCurrentScreen) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setCurrentScreen');\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setCurrentScreen(screenName, screenClassOverride));\n\n        case 4:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setSessionTimeoutDuration(sessionTimeoutInterval) {\n  return _regeneratorRuntime.async(function setSessionTimeoutDuration$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setSessionTimeoutDuration) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setSessionTimeoutDuration');\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setSessionTimeoutDuration(sessionTimeoutInterval));\n\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setUserId(userId) {\n  return _regeneratorRuntime.async(function setUserId$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setUserId) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setUserId');\n\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setUserId(userId));\n\n        case 4:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setUserProperty(name, value) {\n  return _regeneratorRuntime.async(function setUserProperty$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(setUserProperties(_defineProperty({}, name, value)));\n\n        case 2:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function resetAnalyticsData() {\n  return _regeneratorRuntime.async(function resetAnalyticsData$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.resetAnalyticsData) {\n            _context7.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'resetAnalyticsData');\n\n        case 2:\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.resetAnalyticsData());\n\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setUserProperties(properties) {\n  return _regeneratorRuntime.async(function setUserProperties$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setUserProperties) {\n            _context8.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setUserProperties');\n\n        case 2:\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setUserProperties(properties));\n\n        case 4:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setUnavailabilityLogging(isEnabled) {\n  if (!ExpoFirebaseAnalytics.setUnavailabilityLogging) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUnavailabilityLogging');\n  }\n\n  ExpoFirebaseAnalytics.setUnavailabilityLogging(isEnabled);\n}\nexport function setDebugModeEnabled(isEnabled) {\n  return _regeneratorRuntime.async(function setDebugModeEnabled$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          if (ExpoFirebaseAnalytics.setDebugModeEnabled) {\n            _context9.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-firebase-analytics', 'setDebugModeEnabled');\n\n        case 2:\n          _context9.next = 4;\n          return _regeneratorRuntime.awrap(ExpoFirebaseAnalytics.setDebugModeEnabled(isEnabled));\n\n        case 4:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 5:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Analytics.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoFirebaseAnalytics from './ExpoFirebaseAnalytics';\nexport { default as FirebaseAnalyticsJS } from './FirebaseAnalyticsJS';\n\nif (!ExpoFirebaseAnalytics) {\n  console.warn(\n    \"No native ExpoFirebaseAnalytics module found, are you sure the expo-firebase-analytics's module is linked properly?\"\n  );\n}\n\n/**\n * Logs an app event. The event can have up to 25 parameters. Events with the same name must have\n * the same parameters. Up to 500 event names are supported. Using predefined events and/or\n * parameters is recommended for optimal reporting.\n *\n * The following event names are reserved and cannot be used:\n * - `ad_activeview`\n * - `ad_click`\n * - `ad_exposure`\n * - `ad_impression`\n * - `ad_query`\n * - `adunit_exposure`\n * - `app_clear_data`\n * - `app_remove`\n * - `app_update`\n * - `error`\n * - `first_open`\n * - `in_app_purchase`\n * - `notification_dismiss`\n * - `notification_foreground`\n * - `notification_open`\n * - `notification_receive`\n * - `os_update`\n * - `screen_view`\n * - `session_start`\n * - `user_engagement`\n *\n * @param name The name of the event. Should contain 1 to 40 alphanumeric characters or\n *     underscores. The name must start with an alphabetic character. Some event names are\n *     reserved. The \"firebase_\",\n *     \"google_\", and \"ga_\" prefixes are reserved and should not be used. Note that event names are\n *     case-sensitive and that logging two events whose names differ only in case will result in\n *     two distinct events.\n * @param parameters The dictionary of event parameters. Passing `undefined` indicates that the event has\n *     no parameters. Parameter names can be up to 40 characters long and must start with an\n *     alphabetic character and contain only alphanumeric characters and underscores. Only `String`\n *     and `Number` (signed 64-bit integer and 64-bit floating-point number) parameter types are\n *     supported. `String` parameter values can be up to 100 characters long. The \"firebase_\",\n *     \"google_\", and \"ga_\" prefixes are reserved and should not be used for parameter names.\n */\nexport async function logEvent(name: string, properties?: { [key: string]: any }): Promise<void> {\n  if (!ExpoFirebaseAnalytics.logEvent) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'logEvent');\n  }\n  return await ExpoFirebaseAnalytics.logEvent(name, properties);\n}\n\n/**\n * Sets whether analytics collection is enabled for this app on this device. This setting is\n * persisted across app sessions. By default it is enabled.\n *\n * @param isEnabled A flag that enables or disables Analytics collection.\n */\nexport async function setAnalyticsCollectionEnabled(isEnabled: boolean): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setAnalyticsCollectionEnabled) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setAnalyticsCollectionEnabled');\n  }\n  return await ExpoFirebaseAnalytics.setAnalyticsCollectionEnabled(isEnabled);\n}\n\n/**\n * Sets the current screen name, which specifies the current visual context in your app. This helps\n * identify the areas in your app where users spend their time and how they interact with your app.\n *\n * @param screenName The name of the current screen. Should contain 1 to 100 characters. Set to `undefined`\n *     to clear the current screen name.\n * @param screenClassOverride The name of the screen class. Should contain 1 to 100 characters. By\n *     default this is the class name of the current screen (UIViewController on iOS). Set to `undefined` to revert to the\n *     default class name.\n */\nexport async function setCurrentScreen(\n  screenName?: string,\n  screenClassOverride?: string\n): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setCurrentScreen) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setCurrentScreen');\n  }\n  return await ExpoFirebaseAnalytics.setCurrentScreen(screenName, screenClassOverride);\n}\n\n/**\n * Sets the interval of inactivity in seconds that terminates the current session. The default\n * value is 1800000 milliseconds (30 minutes).\n *\n * @param sessionTimeoutInterval The custom time of inactivity in milliseconds before the current\n *     session terminates.\n */\nexport async function setSessionTimeoutDuration(sessionTimeoutInterval: number): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setSessionTimeoutDuration) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setSessionTimeoutDuration');\n  }\n  return await ExpoFirebaseAnalytics.setSessionTimeoutDuration(sessionTimeoutInterval);\n}\n\n/**\n * Sets the user ID property. This feature must be used in accordance with\n * [Google's Privacy Policy](https://www.google.com/policies/privacy)\n *\n * @param userID The user ID to ascribe to the user of this app on this device, which must be\n *     non-empty and no more than 256 characters long. Setting userID to null removes the user ID.\n */\nexport async function setUserId(userId: string | null): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setUserId) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUserId');\n  }\n  return await ExpoFirebaseAnalytics.setUserId(userId);\n}\n\n/**\n * Sets a user property to a given value. Up to 25 user property names are supported. Once set,\n * user property values persist throughout the app life-cycle and across sessions.\n *\n * The following user property names are reserved and cannot be used:\n *\n * - `first_open_time`\n * - `last_deep_link_referrer`\n * - `user_id`\n *\n * @param name The name of the user property to set. Should contain 1 to 24 alphanumeric characters\n *     or underscores and must start with an alphabetic character. The \"firebase_\", \"google_\", and\n *     \"ga_\" prefixes are reserved and should not be used for user property names.\n * @param value The value of the user property. Values can be up to 36 characters long. Setting the\n *     value to null removes the user property.\n */\nexport async function setUserProperty(name: string, value: string): Promise<void> {\n  return await setUserProperties({ [name]: value });\n}\n\n/**\n * Clears all analytics data for this instance from the device and resets the app instance ID.\n */\nexport async function resetAnalyticsData(): Promise<void> {\n  if (!ExpoFirebaseAnalytics.resetAnalyticsData) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'resetAnalyticsData');\n  }\n  return await ExpoFirebaseAnalytics.resetAnalyticsData();\n}\n\n/**\n * Sets multiple user properties to the supplied values.\n *\n * @param properties key/value set of user properties\n */\nexport async function setUserProperties(properties: { [key: string]: string }): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setUserProperties) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUserProperties');\n  }\n  return await ExpoFirebaseAnalytics.setUserProperties(properties);\n}\n\n/**\n * Enables or disables the warning and log messages when using\n * Firebase Analytics on the Expo client.\n *\n * Firebase Analytics is not available on the Expo client and therefore\n * logs the requests to the console for development purposes. To test\n * Firebase Analytics, create a standalone build or custom client.\n * Use this function to suppress the warning and log messages.\n *\n * @param isEnabled A flag that enables or disables unavailability logging.\n */\nexport function setUnavailabilityLogging(isEnabled: boolean): void {\n  if (!ExpoFirebaseAnalytics.setUnavailabilityLogging) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setUnavailabilityLogging');\n  }\n  ExpoFirebaseAnalytics.setUnavailabilityLogging(isEnabled);\n}\n\n/**\n * Enables or disabled debug mode on the Expo client, so events can\n * be tracked using the [DebugView in the Analytics dashboard](https://firebase.google.com/docs/analytics/debugview#reporting).\n *\n * This option is only available on the standard Expo client.\n * When using a standalone build, the bare workflow or web, use the\n * [natively available options](https://firebase.google.com/docs/analytics/debugview).\n *\n * @param isEnabled A flag that enables or disables debug mode.\n */\nexport async function setDebugModeEnabled(isEnabled: boolean): Promise<void> {\n  if (!ExpoFirebaseAnalytics.setDebugModeEnabled) {\n    throw new UnavailabilityError('expo-firebase-analytics', 'setDebugModeEnabled');\n  }\n  return await ExpoFirebaseAnalytics.setDebugModeEnabled(isEnabled);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}