{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sx/Documents/React Native/Foren Tech/consumer_latest/screens/Splash.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { AppLoading, SplashScreen } from \"expo\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Updates from \"expo-updates\";\nimport * as Notifications from \"expo-notifications\";\nimport React, { useState } from \"react\";\nimport { Asset } from \"expo-asset\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Root } from \"native-base\";\nimport * as firebase from \"firebase\";\nconsole.disableYellowBox = true;\n\nvar Splash = function (_React$Component) {\n  _inherits(Splash, _React$Component);\n\n  var _super = _createSuper(Splash);\n\n  function Splash() {\n    var _this;\n\n    _classCallCheck(this, Splash);\n\n    _this = _super.call(this);\n\n    _this._cacheResourcesAsync = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Asset.loadAsync([require(\"../assets/icon.png\"), require(\"../assets/Profile-Image.png\"), require(\"../assets/Help-min.png\"), require(\"../assets/Job-Icon-min.png\")]));\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Expo.Font.loadAsync({\n                Roboto: require(\"native-base/Fonts/Roboto.ttf\"),\n                Roboto_medium: require(\"native-base/Fonts/Roboto_medium.ttf\"),\n                montserrat_semi_blod: require(\"../assets/Fonts/English/Montserrat-SemiBold.otf\"),\n                montserrat_medium: require(\"../assets/Fonts/English/Montserrat-Medium.otf\"),\n                montserrat_arabic_regular: require(\"../assets/Fonts/Arabic/ArbFONTS-Montserrat-Arabic-Regular.ttf\")\n              }));\n\n            case 4:\n              loadApp = function loadApp() {\n                _this.setState({\n                  isAppReady: true\n                });\n              };\n\n              setTimeout(function () {\n                this.loadApp();\n              }, Platform.OS === \"android\" ? 1800 : 2500);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.componentDidMount = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              Updates.checkForUpdateAsync().then(function (update) {\n                if (update.isAvailable) {\n                  _this.setState({\n                    isUpdateAvailable: true\n                  });\n\n                  updateDownload = function updateDownload() {\n                    Updates.reloadAsync();\n                  };\n\n                  setTimeout(function () {\n                    this.updateDownload();\n                  }, 5000);\n                }\n              });\n              Notifications.setBadgeNumberAsync(0);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.checkLangugae = function _callee3() {\n      var lan;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"lan\"));\n\n            case 2:\n              lan = _context3.sent;\n              console.log(\"lan in check functionr \", lan);\n\n              _this.setState({\n                lan: lan !== null ? lan : \"en\"\n              });\n\n              if (lan) {\n                if (lan !== \"en\") {\n                  I18nManager.isRTL = true;\n                  I18nManager.forceRTL(true);\n                } else {\n                  I18nManager.isRTL = false;\n                  I18nManager.forceRTL(false);\n                }\n              }\n\n              if (!(lan !== null && lan !== \"\")) {\n                _context3.next = 10;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", lan);\n\n            case 10:\n              return _context3.abrupt(\"return\", \"en\");\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.renderSplash = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      isSplashReady: false,\n      isAppReady: false,\n      lan: AsyncStorage.getItem(\"lan\"),\n      isUpdateAvailable: false\n    };\n\n    _this.checkLangugae();\n\n    return _this;\n  }\n\n  _createClass(Splash, [{\n    key: \"render\",\n    value: function render() {\n      if (this.state.isUpdateAvailable === true) {\n        return React.createElement(Image, {\n          style: {\n            height: Dimensions.get(\"window\").height,\n            width: Dimensions.get(\"window\").width\n          },\n          source: require(\"../assets/updating.gif\"),\n          resizeMode: \"contain\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 9\n          }\n        });\n      }\n\n      if (!this.state.isAppReady && !this.state.isUpdateAvailable) {\n        if (\"en\" == this.state.lan) {\n          console.log(\"checking language \", this.state.lan);\n          return React.createElement(Image, {\n            style: {\n              height: Dimensions.get(\"window\").height,\n              width: Dimensions.get(\"window\").width\n            },\n            source: this.state.lan == \"en\" ? require(\"../assets/splash1.gif\") : require(\"../assets/splash-ar1.gif\"),\n            resizeMode: \"contain\",\n            onLoadStart: this._cacheResourcesAsync,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 11\n            }\n          });\n        } else {\n          return React.createElement(Image, {\n            style: {\n              height: Dimensions.get(\"window\").height,\n              width: Dimensions.get(\"window\").width\n            },\n            source: require(\"../assets/splash-ar1.gif\"),\n            resizeMode: \"contain\",\n            onLoadStart: this._cacheResourcesAsync,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 11\n            }\n          });\n        }\n      }\n\n      return this.props.navigation.navigate(\"LandingSecreen\");\n    }\n  }]);\n\n  return Splash;\n}(React.Component);\n\nexport { Splash as default };","map":{"version":3,"sources":["/Users/sx/Documents/React Native/Foren Tech/consumer_latest/screens/Splash.js"],"names":["AppLoading","SplashScreen","AsyncStorage","Updates","Notifications","React","useState","Asset","Ionicons","Root","firebase","console","disableYellowBox","Splash","_cacheResourcesAsync","loadAsync","require","Expo","Font","Roboto","Roboto_medium","montserrat_semi_blod","montserrat_medium","montserrat_arabic_regular","loadApp","setState","isAppReady","setTimeout","Platform","OS","componentDidMount","checkForUpdateAsync","then","update","isAvailable","isUpdateAvailable","updateDownload","reloadAsync","setBadgeNumberAsync","checkLangugae","getItem","lan","log","I18nManager","isRTL","forceRTL","renderSplash","state","isSplashReady","height","Dimensions","get","width","props","navigation","navigate","Component"],"mappings":"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","sourcesContent":["import { AppLoading, SplashScreen } from \"expo\";\nimport {\n  AsyncStorage,\n  Dimensions,\n  I18nManager,\n  Image,\n  Platform,\n  StyleSheet\n} from \"react-native\";\nimport * as Updates from \"expo-updates\";\nimport * as Notifications from \"expo-notifications\";\nimport React, { useState } from \"react\";\n\nimport { Asset } from \"expo-asset\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Root } from \"native-base\";\nimport * as firebase from \"firebase\";\nconsole.disableYellowBox = true;\n\nexport default class Splash extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isSplashReady: false,\n      isAppReady: false,\n      lan: AsyncStorage.getItem(\"lan\"),\n      isUpdateAvailable: false\n    };\n    this.checkLangugae();\n  }\n\n  _cacheResourcesAsync = async () => {\n    await Asset.loadAsync([\n      require(\"../assets/icon.png\"),\n      require(\"../assets/Profile-Image.png\"),\n      require(\"../assets/Help-min.png\"),\n      require(\"../assets/Job-Icon-min.png\")\n    ]),\n      await Expo.Font.loadAsync({\n        Roboto: require(\"native-base/Fonts/Roboto.ttf\"),\n        Roboto_medium: require(\"native-base/Fonts/Roboto_medium.ttf\"),\n        montserrat_semi_blod: require(\"../assets/Fonts/English/Montserrat-SemiBold.otf\"),\n        montserrat_medium: require(\"../assets/Fonts/English/Montserrat-Medium.otf\"),\n        montserrat_arabic_regular: require(\"../assets/Fonts/Arabic/ArbFONTS-Montserrat-Arabic-Regular.ttf\")\n      });\n\n    loadApp = () => {\n      this.setState({ isAppReady: true });\n    };\n    setTimeout(\n      function() {\n        this.loadApp();\n      },\n      Platform.OS === \"android\" ? 1800 : 2500\n    );\n  };\n  componentDidMount = async () => {\n    Updates.checkForUpdateAsync().then(update => {\n      if (update.isAvailable) {\n        this.setState({ isUpdateAvailable: true });\n        updateDownload = () => {\n          Updates.reloadAsync();\n        };\n        setTimeout(function() {\n          this.updateDownload();\n        }, 5000);\n      }\n    });\n    Notifications.setBadgeNumberAsync(0);\n  };\n  checkLangugae = async () => {\n    let lan = await AsyncStorage.getItem(\"lan\");\n    console.log(\"lan in check functionr \", lan);\n    this.setState({ lan: lan !== null ? lan : \"en\" });\n    if (lan) {\n      if (lan !== \"en\") {\n        I18nManager.isRTL = true;\n        I18nManager.forceRTL(true);\n      } else {\n        I18nManager.isRTL = false;\n        I18nManager.forceRTL(false);\n      }\n    }\n    if (lan !== null && lan !== \"\") {\n      return lan;\n    } else {\n      return \"en\";\n    }\n  };\n  renderSplash = async () => {};\n  render() {\n    // if (!this.state.isSplashReady) {\n    //   return (\n    //     <AppLoading\n    //       startAsync={this._cacheSplashResourcesAsync}\n    //       onFinish={() => this.setState({ isSplashReady: true })}\n\n    //     />\n    //   );\n    // }\n    if (this.state.isUpdateAvailable === true) {\n      return (\n        <Image\n          style={{\n            height: Dimensions.get(\"window\").height,\n            width: Dimensions.get(\"window\").width\n          }}\n          source={require(\"../assets/updating.gif\")}\n          resizeMode=\"contain\"\n        />\n      );\n    }\n    if (!this.state.isAppReady && !this.state.isUpdateAvailable) {\n      if (\"en\" == this.state.lan) {\n        console.log(\"checking language \", this.state.lan);\n        return (\n          <Image\n            style={{\n              height: Dimensions.get(\"window\").height,\n              width: Dimensions.get(\"window\").width\n            }}\n            source={\n              this.state.lan == \"en\"\n                ? require(\"../assets/splash1.gif\")\n                : require(\"../assets/splash-ar1.gif\")\n            }\n            resizeMode=\"contain\"\n            onLoadStart={this._cacheResourcesAsync}\n          />\n        );\n      } else {\n        return (\n          <Image\n            style={{\n              height: Dimensions.get(\"window\").height,\n              width: Dimensions.get(\"window\").width\n            }}\n            source={require(\"../assets/splash-ar1.gif\")}\n            resizeMode=\"contain\"\n            onLoadStart={this._cacheResourcesAsync}\n          />\n        );\n      }\n    }\n\n    return this.props.navigation.navigate(\"LandingSecreen\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}